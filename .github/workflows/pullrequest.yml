name: Comment on Pull Request

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  issues: write

jobs:
  comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create env file from PR_SCANNER secret
        run: |
          # Decode the base64-encoded PR_SCANNER secret into a file for Docker to use
          echo "${{ secrets.PR_SCANNER }}" | base64 --decode > pr_scanner.env

      - name: Generate Code Diff for PR
        run: |
          # Ensure the required directories exist
          mkdir -p /tmp/in
          mkdir -p /tmp/out
          # Fetch the base branch for the PR
          git fetch origin ${{ github.event.pull_request.base.ref }}
          # Write the diff between the base branch and HEAD to a file
          git diff origin/${{ github.event.pull_request.base.ref }} HEAD > /tmp/in/codediff.txt

      - name: Run PR Scanner
        id: pr_scanner
        run: |
          docker run \
              --env-file pr_scanner.env \
              -e PROJECT_ROOT=/src \
              -v "/tmp/out:/out" \
              -v "/tmp/in:/in" \
              -v "$(pwd):/src" \
              nady5730642/ai-scan-job:latest \
              python app.py
          # Read the result from the file generated by the scanner
          RESULT=$(cat /tmp/out/result.txt)
          echo "docker_output<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete existing bot comment if any
        uses: actions/github-script@v6
        env:
          DOCKER_OUTPUT: ${{ steps.pr_scanner.outputs.docker_output }}
        with:
          script: |
            // List all comments on the pull request
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            // Find a comment containing the unique marker
            const botComment = comments.find(comment => comment.body.includes('<!-- my-bot-comment -->'));
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

      - name: Create new bot comment with timestamp
        uses: actions/github-script@v6
        env:
          DOCKER_OUTPUT: ${{ steps.pr_scanner.outputs.docker_output }}
        with:
          script: |
            // Get current timestamp
            const timestamp = new Date().toISOString();
            // Build the comment message with a unique marker and the result from the scanner
            const message = `<!-- my-bot-comment --> <small>Timestamp: ${timestamp}</small>\n\n ## PR Review:\n${process.env.DOCKER_OUTPUT}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message,
            });